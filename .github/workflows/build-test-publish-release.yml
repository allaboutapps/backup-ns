name: Build & Test

on:
  push:
    branches:
      - "**"
    tags:
      - "**"

env:
  DOCKER_ENV_FILE: ".github/workflows/docker.env"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: setup@kindconfig
        run: |
          kind_in="${{ github.workspace }}/.github/config/kind.yml.in"
          kind_out="${{ github.workspace }}/.github/config/kind.yml"
          hostip=$(sh .github/scripts/get-host-ip.sh)
          sed "s/127.0.0.1/$hostip/g" $kind_in > $kind_out

      - name: setup@kubernetes
        uses: engineerd/setup-kind@v0.5.0
        with:
          config: .github/config/kind.yml
          version: v0.24.0
          name: backup-ns
          image: kindest/node:v1.28.13 # ensure same as in Makefile

      - name: setup@kubeconfig
        run: |
          hostip=$(sh .github/scripts/get-host-ip.sh)
          sed "s/127.0.0.1/$hostip/g" $HOME/.kube/config > ${{ github.workspace }}/kubeconfig.yml

      - name: Build the Docker image
        run: docker build --target builder --file Dockerfile --tag ${IMAGE_NAME}-builder:${GITHUB_SHA:8} .

      - name: Create container
        run: docker run -d --env-file $DOCKER_ENV_FILE --name=builder -it ${IMAGE_NAME}-builder:${GITHUB_SHA:8}

      - name: Init Kind
        run: docker exec builder bash /app/test/init_kind.sh

      - name: make tidy
        run: docker exec builder make tidy

      - name: make build
        run: docker exec builder make build

      - name: make test
        run: docker exec builder make test

      - name: Stop container
        if: ${{ always() }}
        run: docker stop builder

      - name: Remove container
        if: ${{ always() }}
        run: docker rm builder

  publish:
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))

    needs:
      - build-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

  release-chart:
    if: startsWith(github.ref, 'refs/tags/v')

    needs:
      - build-test
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: "true"


  release-bins:
    if: startsWith(github.ref, 'refs/tags/v')

    needs:
      - build-test
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Build the Docker image with binaries
        run: |
          docker build --target builder --file Dockerfile --tag ${IMAGE_NAME}-builder:${GITHUB_SHA:8} .
          docker create --name builder ${IMAGE_NAME}-builder:${GITHUB_SHA:8}
          mkdir -p dist

      - name: Extract binaries from container
        run: |
          for binary in backup-ns-linux-amd64 backup-ns-linux-arm64 backup-ns-darwin-amd64 backup-ns-darwin-arm64; do
            docker cp builder:/app/bin/$binary dist/ || exit 1
          done
          cp LICENSE dist/

      - name: Create release archives
        run: |
          cd dist
          for file in backup-ns-*; do
            tar czf "${file}.tar.gz" "$file" LICENSE
          done

      - name: Prepare script archive
        run: |
          cp create-adhoc-backup.sh dist/
          chmod +x dist/create-adhoc-backup.sh
          cd dist
          tar czf "create-adhoc-backup.sh.tar.gz" create-adhoc-backup.sh LICENSE

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/backup-ns-linux-amd64.tar.gz
            dist/backup-ns-linux-arm64.tar.gz
            dist/backup-ns-darwin-amd64.tar.gz
            dist/backup-ns-darwin-arm64.tar.gz
            dist/create-adhoc-backup.sh.tar.gz
          name: Release ${{ github.ref_name }}
          body: |
            ## backup-ns ${{ github.ref_name }}

            ### Docker image
            ```bash
            docker pull ghcr.io/allaboutapps/backup-ns:${{ github.ref_name }}
            ```

            ### Local Installation (Linux/amd64)
            ```bash
            curl -Lo backup-ns.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/backup-ns-linux-amd64.tar.gz
            tar xzf backup-ns.tar.gz
            chmod +x backup-ns-linux-amd64
            sudo mv backup-ns-linux-amd64 /usr/local/bin/backup-ns
            rm backup-ns.tar.gz
            ```

            ### Local Installation (macOS/arm64)
            ```bash
            curl -Lo backup-ns.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/backup-ns-darwin-arm64.tar.gz
            tar xzf backup-ns.tar.gz
            chmod +x backup-ns-darwin-arm64
            sudo mv backup-ns-darwin-arm64 /usr/local/bin/backup-ns
            rm backup-ns.tar.gz
            ```

            ### Adhoc backup script
            ```bash
            curl -Lo create-adhoc-backup.sh.tar.gz https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/create-adhoc-backup.sh.tar.gz
            tar xzf create-adhoc-backup.sh.tar.gz
            chmod +x create-adhoc-backup.sh
            sudo mv create-adhoc-backup.sh /usr/local/bin/
            rm create-adhoc-backup.sh.tar.gz
            ```

            ### Install as Dockerfile layer (for [DevContainers](https://containers.dev/))
            ```Dockerfile
            RUN set -x; BACKUP_NS_VERSION="${{ github.ref_name }}" \
              && BACKUP_NS_TMP="$(mktemp -d)" \
              && cd "${BACKUP_NS_TMP}" \
              && ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')" \
              && curl -fsSLO "https://github.com/allaboutapps/backup-ns/releases/download/v${BACKUP_NS_VERSION}/backup-ns-linux-${ARCH}.tar.gz" \
              && tar zxvf "backup-ns-linux-${ARCH}.tar.gz" \
              && chmod +x "backup-ns-linux-${ARCH}" \
              && cp "backup-ns-linux-${ARCH}" /usr/local/bin/backup-ns \
              && curl -fsSLO "https://github.com/allaboutapps/backup-ns/releases/download/v${BACKUP_NS_VERSION}/create-adhoc-backup.sh.tar.gz" \
              && tar zxvf "create-adhoc-backup.sh.tar.gz" \
              && chmod +x create-adhoc-backup.sh \
              && cp create-adhoc-backup.sh /usr/local/bin/ \
              && rm -rf "${BACKUP_NS_TMP}"
            ```
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop container
        if: always()
        run: docker stop builder

      - name: Cleanup
        if: always()
        run: docker rm builder